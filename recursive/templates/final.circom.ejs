pragma circom 2.1.0;
pragma custom_templates;

<% for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
include "recursive2_subproof<%- i %>.verifier.circom";
<% } -%>
include "iszero.circom";
include "vadcop.circom";
include "cmul.circom";

<% function unrollCode(code) {                                                          -%>
<%
    function ref(r) {
        if (r.type == "challenge") {
            // TODO
        } else if (r.type == "public") {
            return "publics[" + r.id + "]";
        } else if (r.type == "tmp") {
            return "tmp_"+r.id;
        } else if (r.type == "number") {
            return r.value;
        } else if (r.type === "subproofValue") {
            return "s" + r.subproofId + "_subAirValues[" + r.id + "]";
        } else {
            throw new Error("Invalid Ref: " +r.type);
        }
    }
-%>
<% for(let i=0; i<code.length; i++) {                                 -%>
<%      let inst = code[i];                                           -%>
<%      if (inst.dest.type == "tmp" && ![1,3].includes(inst.dest.dim)) {                -%>
<%          throw new Error("Invalid dimension");                                       -%>
<%      }                                                                               -%>
<%      if (inst.op == "add") {                                                         -%>
<%          if ((inst.src[0].dim==1) && (inst.src[1].dim==1)) {                         -%>
    signal <%- ref(inst.dest) %> <== <%- ref(inst.src[0]) %> + <%- ref(inst.src[1]) %>;
<%          } else if ((inst.src[0].dim==1) && (inst.src[1].dim==3)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %> + <%- ref(inst.src[1]) %>[0], <%- ref(inst.src[1]) %>[1],  <%- ref(inst.src[1]) %>[2]];
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==1)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %>[0] + <%- ref(inst.src[1]) %>, <%- ref(inst.src[0]) %>[1], <%- ref(inst.src[0]) %>[2]];
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==3)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %>[0] + <%- ref(inst.src[1]) %>[0], <%- ref(inst.src[0]) %>[1] + <%- ref(inst.src[1]) %>[1], <%- ref(inst.src[0]) %>[2] + <%- ref(inst.src[1]) %>[2]];
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else if (inst.op == "sub") {                                                  -%>
<%          if ((inst.src[0].dim==1) && (inst.src[1].dim==1)) {                         -%>
    signal <%- ref(inst.dest) %> <== <%- ref(inst.src[0]) %> - <%- ref(inst.src[1]) %>;
<%          } else if ((inst.src[0].dim==1) && (inst.src[1].dim==3)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %> - <%- ref(inst.src[1]) %>[0], -<%- ref(inst.src[1]) %>[1], -<%- ref(inst.src[1]) %>[2]];
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==1)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %>[0] - <%- ref(inst.src[1]) %>, <%- ref(inst.src[0]) %>[1], <%- ref(inst.src[0]) %>[2]];
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==3)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %>[0] - <%- ref(inst.src[1]) %>[0], <%- ref(inst.src[0]) %>[1] - <%- ref(inst.src[1]) %>[1], <%- ref(inst.src[0]) %>[2] - <%- ref(inst.src[1]) %>[2]];
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else if (inst.op == "mul") {                                                  -%>
<%          if ((inst.src[0].dim==1) && (inst.src[1].dim==1)) {                         -%>
    signal <%- ref(inst.dest) %> <== <%- ref(inst.src[0]) %> * <%- ref(inst.src[1]) %>;
<%          } else if ((inst.src[0].dim==1) && (inst.src[1].dim==3)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %> * <%- ref(inst.src[1]) %>[0], <%- ref(inst.src[0]) %> * <%- ref(inst.src[1]) %>[1], <%- ref(inst.src[0]) %> * <%- ref(inst.src[1]) %>[2]];
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==1)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== [<%- ref(inst.src[0]) %>[0] * <%- ref(inst.src[1]) %>, <%- ref(inst.src[0]) %>[1] * <%- ref(inst.src[1]) %>, <%- ref(inst.src[0]) %>[2] * <%- ref(inst.src[1]) %>];
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==3)) {                  -%>
    signal <%- ref(inst.dest) %>[3] <== CMul()(<%- ref(inst.src[0]) %>, <%- ref(inst.src[1]) %>);
<%          } else throw new Error("Invalid src dimensions");                              -%>
<%      } else if (inst.op == "copy") {                                                 -%>
<%          if (inst.src[0].dim==1) {                                                   -%>
    signal <%- ref(inst.dest) %> <== <%- ref(inst.src[0]) %>;
<%          } else if (inst.src[0].dim==3) {                                            -%>
    signal <%- ref(inst.dest) %>[3] <== <%- ref(inst.src[0]) %>;
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else throw new Error("Invalid op");                                           -%>
<% }                                                                                    -%>
<% return ref(code[code.length-1].dest);                                                -%>
<% }  -%>

/* 
    Calculate the transcript
*/ 

template VerifyGlobalChallenges() {

    signal input publics[<%- nPublics %>];
    signal input rootC[<%- starkInfoRecursives2.length %>][4];
<% for(let i=0; i < nChallengesStages.length; i++) {  -%>
<%  const stage = i + 1; -%>
    signal input root<%- stage %>[<%- starkInfoRecursives2.length %>][4];
<% } -%>                  
    signal input rootQ[<%- starkInfoRecursives2.length %>][4];
    signal input evalsHash[<%- starkInfoRecursives2.length %>][4]; 
<% for (let s=1; s<stepsFRI.length; s++) {   -%>
    signal input s<%- s %>_root[<%- starkInfoRecursives2.length %>][4];
<% }                                                     -%>
    signal input finalPolHash[<%- starkInfoRecursives2.length %>][4];

    signal input challenges[<%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal input challengesFRISteps[<%- stepsFRI.length + 1 %>][3];

    signal calculatedChallenges[<%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];
    signal calculatedChallengesFRISteps[<%- stepsFRI.length + 1 %>][3];
    
<%   for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
<%      transcript.put("rootC[" + i + "]", 4); -%>
<%   } -%>
<%   transcript.put("publics", nPublics); -%>
<%   let c = 0; -%>
<%   for(let i=0; i < nChallengesStages.length; i++) {
        const stage = i + 1;
        for(let j = 0; j < nChallengesStages[i]; ++j) {
            transcript.getField("calculatedChallenges[" + (c++) + "]");
        }
        for(let k = 0; k < starkInfoRecursives2.length; ++k) {
            transcript.put("root" + stage + "[" + k + "]", 4);
        }
     } -%>
<%    transcript.getField("calculatedChallenges[" + (c++) + "]"); -%>
<%   for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
<%      transcript.put("rootQ[" + i + "]", 4); -%>
<%   } -%>

<%   transcript.getField("calculatedChallenges[" + (c++) + "]"); -%>
<%   for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
<%      transcript.put("evalsHash[" + i + "]", 4); -%>
<%   } -%>

<%   transcript.getField("calculatedChallenges[" + (c++) + "]"); -%>
<%   transcript.getField("calculatedChallenges[" + (c++) + "]"); -%>

<%  for (let si=0; si<stepsFRI.length; si++) { -%>
<%      transcript.getField(`calculatedChallengesFRISteps[${si}]`); -%>
<%      for(let k = 0; k < starkInfoRecursives2.length; ++k) { -%>
<%          if (si < stepsFRI.length-1) { -%>
<%              transcript.put(`s${si+1}_root[${k}]`, 4); -%>
<%          } else { -%>
<%              transcript.put("finalPolHash[" + k + "]", 4); -%>
<%          } -%>
<%      } -%>
<%  } -%>

<%  transcript.getField(`calculatedChallengesFRISteps[${stepsFRI.length}]`); -%>
<%- transcript.getCode() %>

    // Check that all the challenges match
    for(var i = 0; i < <%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>; i++) {
        calculatedChallenges[i][0] === challenges[i][0];
        calculatedChallenges[i][1] === challenges[i][1];
        calculatedChallenges[i][2] === challenges[i][2];
    }

    for(var i = 0; i < <%- stepsFRI.length + 1 %>; i++) {
        calculatedChallengesFRISteps[i][0] === challengesFRISteps[i][0];
        calculatedChallengesFRISteps[i][1] === challengesFRISteps[i][1];
        calculatedChallengesFRISteps[i][2] === challengesFRISteps[i][2];
    }
}


template Main() {

    signal input publics[<%- nPublics %>];

    signal input challenges[<%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];

    signal input challengesFRISteps[<%- stepsFRI.length + 1 %>][3];

<%  for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
<%      let starkInfo = starkInfoRecursives2[i].starkInfo; -%>
<%      let nSubAirValues = aggregationTypes[starkInfo.finalSubproofId].length; -%>
<%      let c = i; -%>
    signal input s<%- c %>_subAirValues[<%- nSubAirValues %>][3];

    signal input s<%- c %>_circuitType;

    signal input s<%- c %>_aggregationTypes[<%- nSubAirValues %>];

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    signal input s<%- c %>_root<%- i + 1 %>[4];
<% } -%>
    signal input s<%- c %>_rootQ[4];

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    signal input s<%- c %>_s0_vals<%- i+1 %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cm${i+1}`] %>];
<% } -%>
    signal input s<%- c %>_s0_valsQ[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cmQ`] %>];
    signal input s<%- c %>_s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    signal input s<%- c %>_s0_siblings<%- i+1 %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% } -%>
    signal input s<%- c %>_s0_siblingsQ[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
    signal input s<%- c %>_s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];

    signal input s<%- c %>_evals[<%- starkInfo.evMap.length %>][3];

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- c %>_s<%- i %>_root[4];
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- c %>_s<%- i %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << (starkInfo.starkStruct.steps[i-1].nBits - starkInfo.starkStruct.steps[i].nBits))*3 %>];
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- c %>_s<%- i %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[i].nBits %>][4];
<% } -%>

    signal input s<%- c %>_finalPol[<%- 1 << starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits %>][3];

    signal input s<%- c %>_sv_rootC[4];
<%  for (let i = 0; i < nChallengesStages.length; ++i) { -%>
    signal input s<%- c %>_sv_root<%- i+1 %>[4];
<%  } -%>
    signal input s<%- c %>_sv_rootQ[4];
    signal input s<%- c %>_sv_evalsHash[4];
<%  for (let i = 1; i < stepsFRI.length; ++i) { -%>
    signal input s<%- c %>_sv_s<%- i %>_root[4];
<%  } -%>
    signal input s<%- c %>_sv_finalPolHash[4];

<% } -%>

<%  for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
<%      let starkInfo = starkInfoRecursives2[i].starkInfo; -%>
<%      let nSubAirValues = aggregationTypes[starkInfo.finalSubproofId].length; -%>
<%      let c = i; -%>

    component sv<%- c %> = StarkVerifier<%- i %>();
    
    var s<%- c %>_rootCRecursive2[4] = [<%- starkInfoRecursives2[i].rootCRecursive2.join(', ') %>];
    var s<%- c %>_rootCRecursives1[<%- starkInfoRecursives2[i].rootCRecursives1.length %>][4];

<% for(let j = 0; j < starkInfoRecursives2[i].rootCRecursives1.length; j++) { -%>
    s<%- c %>_rootCRecursives1[<%- j %>] = [<%- starkInfoRecursives2[i].rootCRecursives1[j].join(', ') %>];
<% } -%>

    sv<%- c %>.rootC <== SelectVerificationKey(<%- starkInfoRecursives2[i].rootCRecursives1.length %>)(s<%- c %>_circuitType, s<%- c %>_rootCRecursive2, s<%- c %>_rootCRecursives1);

    signal {binary} isNull<%- c %> <== IsZero()(s<%- c %>_circuitType);
    sv<%- c %>.enable <== 1 - isNull<%- c %>;

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    sv<%- c %>.root<%- i+1 %> <== s<%- c %>_root<%- i + 1 %>;
<% } -%>
    sv<%- c %>.rootQ <== s<%- c %>_rootQ;

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    sv<%- c %>.s0_siblings<%- i+1 %> <== s<%- c %>_s0_siblings<%- i+1 %>;
<% } -%>
    sv<%- c %>.s0_siblingsQ <== s<%- c %>_s0_siblingsQ;
    sv<%- c %>.s0_siblingsC <== s<%- c %>_s0_siblingsC;

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    sv<%- c %>.s0_vals<%- i+1 %> <== s<%- c %>_s0_vals<%- i+1 %>;
<% } -%>
    sv<%- c %>.s0_valsQ <== s<%- c %>_s0_valsQ;
    sv<%- c %>.s0_valsC <== s<%- c %>_s0_valsC;

    sv<%- c %>.evals <== s<%- c %>_evals;
    
<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv<%- c %>.s<%- i %>_root <== s<%- c %>_s<%- i %>_root;
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv<%- c %>.s<%- i %>_siblings <== s<%- c %>_s<%- i %>_siblings;
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv<%- c %>.s<%- i %>_vals <== s<%- c %>_s<%- i %>_vals;
<% } -%>

    sv<%- c %>.finalPol <== s<%- c %>_finalPol;

<%  let nPublicsInps = 0; -%>
    sv<%- c %>.publics[<%- nPublicsInps++ %>] <== s<%- c %>_circuitType;
<%  if(nSubAirValues > 0) { -%>
    for(var i = 0; i < <%- nSubAirValues %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_aggregationTypes[i];
    }
<%  nPublicsInps += nSubAirValues; -%>
    for(var i = 0; i < <%- nSubAirValues %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i] <== s<%- c %>_subAirValues[i][0];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i + 1] <== s<%- c %>_subAirValues[i][1];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i + 2] <== s<%- c %>_subAirValues[i][2];
    }
<%  nPublicsInps += 3*nSubAirValues; -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_rootC[i];
    }
<%  nPublicsInps += 4 -%>

<%  for (let i = 0; i < nChallengesStages.length; i++) { -%>
    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_root<%- i+1 %>[i];
    }
<%  nPublicsInps += 4 -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_rootQ[i];
    }
<%  nPublicsInps += 4 -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_evalsHash[i];
    }
<%  nPublicsInps += 4 -%>

<%  for(let i = 1; i < stepsFRI.length; i++) { -%>
    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_s<%- i %>_root[i];
    }
<%  nPublicsInps += 4 -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_finalPolHash[i];
    }
<%  nPublicsInps += 4 -%>

    for(var i = 0; i < <%- nPublics %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== publics[i];
    }
<%  nPublicsInps += nPublics -%>

    for(var i = 0; i < <%-  nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i] <== challenges[i][0];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+1] <== challenges[i][1];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+2] <== challenges[i][2];
    }
<%  nPublicsInps += ( nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4)*3; -%>

    for(var i = 0; i < <%- stepsFRI.length + 1 %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i] <== challengesFRISteps[i][0];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+1] <== challengesFRISteps[i][1];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+2] <== challengesFRISteps[i][2];
    }
<%  nPublicsInps += (stepsFRI.length + 1)*3; -%>

<%  for(let i = 0; i < 4; i++) { -%>
    sv<%- c %>.publics[<%- nPublicsInps++ %>] <== s<%- c %>_rootCRecursive2[<%- i %>];
<%  } -%>
<% } -%>  

    // Calculate transcript and check that matches with the global challenges
    component verifyChallenges = VerifyGlobalChallenges();
    verifyChallenges.challenges <== challenges;
    verifyChallenges.challengesFRISteps <== challengesFRISteps;
    verifyChallenges.publics <== publics;
<%  for(let i = 0; i < starkInfoRecursives2.length; ++i) { -%>
    verifyChallenges.rootC[<%- i %>] <== s<%- i %>_sv_rootC;
<%      for (let j = 0; j < nChallengesStages.length; ++j) { -%>
    verifyChallenges.root<%- j + 1 %>[<%- i %>] <== s<%- i %>_sv_root<%- j+1 %>;
<%      } -%>
    verifyChallenges.rootQ[<%- i %>] <== s<%- i %>_sv_rootQ;
    verifyChallenges.evalsHash[<%- i %>] <== s<%- i %>_sv_evalsHash;
<%      for (let j = 1; j < stepsFRI.length; ++j) { -%>
    verifyChallenges.s<%- j %>_root[<%- i %>] <== s<%- i %>_sv_s<%- j %>_root;
<%      } -%>
    verifyChallenges.finalPolHash[<%- i %>] <== s<%- i %>_sv_finalPolHash;
<%  } -%>

<% for(let i = 0; i < globalConstraints.length; i++) { -%>
<% const c = unrollCode(globalConstraints[i].code) -%>
    <%- c %>[0] === 0;
    <%- c %>[1] === 0;
    <%- c %>[2] === 0;
<% } -%>
}

component main {public [publics]} = Main();
