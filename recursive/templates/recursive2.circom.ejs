pragma circom 2.1.0;
pragma custom_templates;

include "mux2.circom";
include "mux1.circom";
include "iszero.circom";
include "vadcop.circom";
include "<%- verifierCircuitName %>.verifier.circom";

template Main() {

    var rootCRecursives1[<%- vks.length %>][4];
   
    <% for(let i = 0; i < vks.length; i++) { -%>
        rootCRecursives1[<%- i %>] = [<%- vks[i].join(', ') %>];
    <% } -%>

    signal input publics[<%- nPublics %>];

    signal input aggregationTypes[<%- nSubAirValues %>];

    signal input challenges[<%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];

    signal input challengesFRISteps[<%- stepsFRI.length + 1 %>][3];

    signal input rootCRecursive2[4];

<%  let circuits = ["A", "B"]; -%>
<%  for(let i = 0; i < circuits.length; ++i) { -%>
<%      let c = circuits[i] -%>
    signal input s<%- c %>_circuitType;

    signal input s<%- c %>_subAirValues[<%- nSubAirValues %>][3];

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    signal input s<%- c %>_root<%- i + 1 %>[4];
<% } -%>
    signal input s<%- c %>_rootQ[4];

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    signal input s<%- c %>_s0_vals<%- i+1 %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cm${i+1}`] %>];
<% } -%>
    signal input s<%- c %>_s0_valsQ[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cmQ`] %>];
    signal input s<%- c %>_s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    signal input s<%- c %>_s0_siblings<%- i+1 %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<% } -%>
    signal input s<%- c %>_s0_siblingsQ[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
    signal input s<%- c %>_s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];

    signal input s<%- c %>_evals[<%- starkInfo.evMap.length %>][3];

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- c %>_s<%- i %>_root[4];
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- c %>_s<%- i %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << (starkInfo.starkStruct.steps[i-1].nBits - starkInfo.starkStruct.steps[i].nBits))*3 %>];
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- c %>_s<%- i %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[i].nBits %>][4];
<% } -%>

    signal input s<%- c %>_finalPol[<%- 1 << starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits %>][3];

    signal input s<%- c %>_sv_rootC[4];
<%  for (let i = 0; i < nChallengesStages.length; ++i) { -%>
    signal input s<%- c %>_sv_root<%- i+1 %>[4];
<%  } -%>
    signal input s<%- c %>_sv_rootQ[4];
    signal input s<%- c %>_sv_evalsHash[4];
<%  for (let i = 1; i < stepsFRI.length; ++i) { -%>
    signal input s<%- c %>_sv_s<%- i %>_root[4];
<%  } -%>
    signal input s<%- c %>_sv_finalPolHash[4];
<%  } -%>
    
    signal output sv_circuitType;
    signal output sv_aggregationTypes[<%- nSubAirValues %>];
    signal output sv_subAirValues[<%- nSubAirValues %>][3];
    signal output sv_rootC[4];
<%  for (let i = 0; i < nChallengesStages.length; ++i) { -%>
    signal output sv_root<%- i+1 %>[4];
<%  } -%>
    signal output sv_rootQ[4];
    signal output sv_evalsHash[4];
<%      for(let i = 1; i < stepsFRI.length; i++) { -%>
    signal output sv_s<%- i %>_root[4];
<%  } -%>
    signal output sv_finalPolHash[4];

<%  for(let i = 0; i < circuits.length; ++i) { -%>
<%      let c = circuits[i] -%>
    signal {binary} isNull<%- c %> <== IsZero()(s<%- c %>_circuitType);

    component sv<%- c %> = StarkVerifier();
    
    sv<%- c %>.enable <== 1 - isNull<%- c %>;

    sv<%- c %>.rootC <== SelectVerificationKey(<%- vks.length %>)(s<%- c %>_circuitType, rootCRecursive2, rootCRecursives1);

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    sv<%- c %>.root<%- i+1 %> <== s<%- c %>_root<%- i + 1 %>;
<% } -%>
    sv<%- c %>.rootQ <== s<%- c %>_rootQ;

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    sv<%- c %>.s0_siblings<%- i+1 %> <== s<%- c %>_s0_siblings<%- i+1 %>;
<% } -%>
    sv<%- c %>.s0_siblingsQ <== s<%- c %>_s0_siblingsQ;
    sv<%- c %>.s0_siblingsC <== s<%- c %>_s0_siblingsC;

<% for (let i = 0; i < starkInfo.numChallenges.length; ++i) { -%>
    sv<%- c %>.s0_vals<%- i+1 %> <== s<%- c %>_s0_vals<%- i+1 %>;
<% } -%>
    sv<%- c %>.s0_valsQ <== s<%- c %>_s0_valsQ;
    sv<%- c %>.s0_valsC <== s<%- c %>_s0_valsC;

    sv<%- c %>.evals <== s<%- c %>_evals;
    
<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv<%- c %>.s<%- i %>_root <== s<%- c %>_s<%- i %>_root;
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv<%- c %>.s<%- i %>_siblings <== s<%- c %>_s<%- i %>_siblings;
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv<%- c %>.s<%- i %>_vals <== s<%- c %>_s<%- i %>_vals;
<% } -%>

    sv<%- c %>.finalPol <== s<%- c %>_finalPol;

<%  let nPublicsInps = 0; -%>
    sv<%- c %>.publics[<%- nPublicsInps++ %>] <== s<%- c %>_circuitType;

<%  if(nSubAirValues > 0) { -%>
    for(var i = 0; i < <%- nSubAirValues %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== aggregationTypes[i];
    }
<%  nPublicsInps += nSubAirValues; -%>

    for(var i = 0; i < <%- nSubAirValues %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i] <== s<%- c %>_subAirValues[i][0];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i + 1] <== s<%- c %>_subAirValues[i][1];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i + 2] <== s<%- c %>_subAirValues[i][2];
    }
<%  nPublicsInps += 3*nSubAirValues; -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_rootC[i];
    }
<%  nPublicsInps += 4 -%>

<%  for (let i = 0; i < nChallengesStages.length; i++) { -%>
    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_root<%- i+1 %>[i];
    }

<%  nPublicsInps += 4 -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_rootQ[i];
    }
<%  nPublicsInps += 4 -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_evalsHash[i];
    }
<%  nPublicsInps += 4 -%>

<%  for(let i = 1; i < stepsFRI.length; i++) { -%>
    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_s<%- i %>_root[i];
    }
<%  nPublicsInps += 4 -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== s<%- c %>_sv_finalPolHash[i];
    }
<%  nPublicsInps += 4 -%>

    for(var i = 0; i < <%- nPublics %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + i] <== publics[i];
    }
<%  nPublicsInps += nPublics -%>

    for(var i = 0; i < <%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i] <== challenges[i][0];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+1] <== challenges[i][1];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+2] <== challenges[i][2];
    }
<%  nPublicsInps += (nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4)*3; -%>

    for(var i = 0; i < <%- stepsFRI.length + 1 %>; i++) {
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i] <== challengesFRISteps[i][0];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+1] <== challengesFRISteps[i][1];
        sv<%- c %>.publics[<%- nPublicsInps %> + 3*i+2] <== challengesFRISteps[i][2];
    }
<%  nPublicsInps += (stepsFRI.length + 1)*3; -%>

for(var i = 0; i < 4; i++) {
    sv<%- c %>.publics[<%- nPublicsInps %> + i] <== rootCRecursive2[i];
}
<%  nPublicsInps += 4 -%>
<%  } -%>
    
    signal {binary} aggTypes[<%- nSubAirValues %>];
    for(var i = 0; i < <%- nSubAirValues %>; i++) {
        aggregationTypes[i] * (aggregationTypes[i] - 1) === 0;
        aggTypes[i] <== aggregationTypes[i];
    }

    sv_circuitType <== 1;
    sv_aggregationTypes <== aggTypes;
    for(var i = 0; i < <%- nSubAirValues %>; i++) {
        sv_subAirValues[i] <== AggregateSubAirValues()(sA_subAirValues[i], sB_subAirValues[i], isNullA, isNullB, aggTypes[i]);
    }
    sv_rootC <== AggregateValues()(sA_sv_rootC, sB_sv_rootC, isNullA, isNullB);
<%  for (let i = 0; i < nChallengesStages.length; ++i) { -%>
    sv_root<%- i+1 %> <== AggregateValues()(sA_sv_root<%- i+1 %>, sB_sv_root<%- i+1 %>, isNullA, isNullB);
<%  } -%>
    sv_rootQ <== AggregateValues()(sA_sv_rootQ, sB_sv_rootQ, isNullA, isNullB);
    sv_evalsHash <== AggregateValues()(sA_sv_evalsHash, sB_sv_evalsHash, isNullA, isNullB);
<%      for(let i = 1; i < stepsFRI.length; i++) { -%>
    sv_s<%- i %>_root <== AggregateValues()(sA_s<%- i %>_root, sB_s<%- i %>_root, isNullA, isNullB);
<%  } -%>
    sv_finalPolHash <== AggregateValues()(sA_sv_finalPolHash, sB_sv_finalPolHash, isNullA, isNullB);
}

<% const publics = ["publics", "challenges", "challengesFRISteps", "rootCRecursive2"]; -%>

component main {public [<%- publics.join(",") %>]} = Main();
